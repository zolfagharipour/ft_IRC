2,551 / 5,000
Several steps in the project:

I. "Logging" part

=> A) Parse the user's first cmd (./ircserv <port> <pwd>)

=> B) Check and connect to the server
- Check if a server exists under these parameters
- Ask the user for their ids (name, nickname, status, permissions) using the NICK and USER commands
° Check that these ids are valid and available (especially for the nickname)
- Connect the user to the server (probably using sockets and the poll() function)
° Send an RPL_REPLY from the server

II. "Channel" part

=> A) Different types of "Channel"
- An "exclusive" channel with two users, aka private messaging (cmd PRIVMSG + nickname)
- A "collective" channel, aka a real channel with 2 or more users who communicate with each other (cmd PRIVMSG + channel name)
=> Shouldn't we start from an abstract class AChannel and decline both? (number of users, specific cmds...)
In mode it is the prototype of PRIVMSG + arg with the argument arg that would change.
" The difference is that the server will relay the message to all the users in the channel, instead of just a single user."

=> B) Breaking down messaging
- Parsing a message:
° Max size: 512 (\r\n included)
° Format: CMD + PARAMS (with 15 params max)
° Examples of valid messages:
* PRIVMSG rory :Hey Rory...
* :borja!borja@polaris.cs.uchicago.edu PRIVMSG #cmsc23300 :Hello everybody
=> The first part is a "full client identifier" (<nick>!<user>@<host>)

- Organizing the exchange of these messages:
° Looking at the TCP/IP side?
° Know that a message sent, in fine, is a command;
and that when a command is sent from the client to the server,
the server will respond with a reply (to acknowledge the cmd, give information, indicate an error...)

III. "Utils" section

=> A) Commands
- There will inevitably be a time when we will have to recode the existing commands:
° JOIN
° NICK
° QUIT
° MODE
° WHOIS
° PRVMSG

=> B) Work on a good nomenclature of our enums:
- the @ in front of an operator
- the * to talk about a nickname that has not yet been setup
- etc.
- This is important because our IRC server will have to return replies,
so depending on the request made by a client, we must be able to return an adequate reply
